trigger:
  branches:
    include:
      - master

pool:
  name: boardgame-projecy

variables:
  MAVEN_OPTS: "-Dmaven.test.failure.ignore=true"
  DOCKER_IMAGE_NAME: "prasannanjaneya/boardgame-project"
  JAVA_HOME_PATH: "/usr/lib/jvm/java-17-openjdk-amd64"  # Java 17 for SonarQube plugin

stages:
  # -----------------------------
  - stage: Build_and_Test
    displayName: "Maven Build, Test & SonarQube Analysis"
    jobs:
      - job: MavenBuild
        displayName: "Compile, Test & SonarQube"
        steps:
          # SonarQube Prepare
          - task: SonarQubePrepare@5
            displayName: "Prepare SonarQube Analysis"
            inputs:
              SonarQube: 'sonarqube-svc'      # Your service connection name
              scannerMode: 'CLI'
              configMode: 'file'

          # Maven Build + SonarQube
          - task: Maven@4
            displayName: "Maven Build + SonarQube"
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean install sonar:sonar'
              options: '-B'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'Path'
              jdkDirectory: '$(JAVA_HOME_PATH)'
              mavenOptions: '$(MAVEN_OPTS)'
              sonarQubeRunAnalysis: true
              sqMavenPluginVersionChoice: 'latest'

          # SonarQube Analyze & Publish Quality Gate
          - task: SonarQubeAnalyze@5
            displayName: "Run SonarQube Analysis"

          - task: SonarQubePublish@5
            displayName: "Publish SonarQube Quality Gate Results"
            inputs:
              pollingTimeoutSec: '300'

  # -----------------------------
  - stage: Dependency_Scan
    displayName: "Trivy Source Scan"
    dependsOn: Build_and_Test
    jobs:
      - job: TrivyScan
        displayName: "Scan Source Code Dependencies"
        steps:
          - script: |
              echo "Installing Trivy..."
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
              sudo mv ./bin/trivy /usr/local/bin/
              echo "Running Trivy FS scan on source code..."
              trivy fs --format json --output trivy-report-source.json --severity MEDIUM,LOW,UNKNOWN,HIGH,CRITICAL .
            displayName: "Run Trivy Source Scan"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Trivy Source Scan Report"
            inputs:
              PathtoPublish: 'trivy-report-source.json'
              ArtifactName: 'TrivySourceReport'
              publishLocation: 'Container'

  # -----------------------------
  - stage: Build_and_Push_Docker_Image
    displayName: "Build & Push Docker Image"
    dependsOn: Dependency_Scan
    jobs:
      - job: DockerBuildPush
        displayName: "Build & Push Docker Image"
        steps:
          - task: Docker@2
            displayName: "Build & Push Docker Image"
            inputs:
              containerRegistry: 'docker-svc'
              repository: '$(DOCKER_IMAGE_NAME)'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              buildContext: '.'               # Ensure target/ exists
              tags: '$(Build.BuildId)'

  # -----------------------------
  - stage: Scan_Docker_Image
    displayName: "Trivy Docker Image Scan"
    dependsOn: Build_and_Push_Docker_Image
    jobs:
      - job: DockerTrivyScan
        displayName: "Scan Docker Image"
        steps:
          - script: |
              echo "Installing Trivy..."
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
              sudo mv ./bin/trivy /usr/local/bin/
              echo "Running Trivy scan on Docker image..."
              trivy image --format json --output trivy-report-image.json --severity MEDIUM,LOW,UNKNOWN,HIGH,CRITICAL $(DOCKER_IMAGE_NAME):$(Build.BuildId)
            displayName: "Run Trivy Docker Scan"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Trivy Docker Scan Report"
            inputs:
              PathtoPublish: 'trivy-report-image.json'
              ArtifactName: 'TrivyDockerReport'
              publishLocation: 'Container'
